
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000007f4  00000868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a6  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f8  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ad  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043a  00000000  00000000  000020c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c8  00000000  00000000  000024fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000026c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 00 	call	0xee	; 0xee <main>
  8a:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
	
    // Set AVCC as reference, right adjust result, start with channel 0
    //ADMUX = (1 << REFS0);
    
    // Enable ADC, set prescaler to 8 (ADPS2 = 0, ADPS1 = 1, ADPS0 = 1)
    ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0);
  92:	83 e8       	ldi	r24, 0x83	; 131
  94:	86 b9       	out	0x06, r24	; 6
  96:	08 95       	ret

00000098 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
    // Select ADC channel (only 0-7 valid)
    //ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
	ADMUX |= channel;
  98:	97 b1       	in	r25, 0x07	; 7
  9a:	89 2b       	or	r24, r25
  9c:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << REFS0);
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	87 b9       	out	0x07, r24	; 7
	
    
    // Start conversion
    ADCSRA |= (1 << ADSC);
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	86 b9       	out	0x06, r24	; 6
    
    // Wait for conversion to complete
    //while (ADCSRA & (1 << ADSC));
	while((ADCSRA >> ADSC ) & 1);
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_Read+0x12>
    
    // Read ADC result (ADCL must be read first, then ADCH)
    uint16_t result = ADCL;
  ae:	24 b1       	in	r18, 0x04	; 4
    result |= (ADCH << 8);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	98 2f       	mov	r25, r24
  b6:	88 27       	eor	r24, r24
    
    return result;
}
  b8:	82 2b       	or	r24, r18
  ba:	08 95       	ret

000000bc <adc_to_mv>:

uint32_t adc_to_mv(uint32_t adc_value, uint8_t resolution) {
  bc:	e4 2f       	mov	r30, r20
    //return (adc_value * 5000) >> resolution; // Convert to mV (assuming Vref = 5V)
	return (adc_value * 5000) / ((1 << resolution)-1);
  be:	a8 e8       	ldi	r26, 0x88	; 136
  c0:	b3 e1       	ldi	r27, 0x13	; 19
  c2:	9b 01       	movw	r18, r22
  c4:	ac 01       	movw	r20, r24
  c6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__muluhisi3>
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <adc_to_mv+0x18>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	ea 95       	dec	r30
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <adc_to_mv+0x14>
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	31 09       	sbc	r19, r1
  dc:	03 2e       	mov	r0, r19
  de:	00 0c       	add	r0, r0
  e0:	44 0b       	sbc	r20, r20
  e2:	55 0b       	sbc	r21, r21
  e4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodsi4>
}
  e8:	ca 01       	movw	r24, r20
  ea:	b9 01       	movw	r22, r18
  ec:	08 95       	ret

000000ee <main>:
#include "adc.h"
#include "uart.h"
#include <stdio.h>
#include <util/delay.h>

int main() {
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	64 97       	sbiw	r28, 0x14	; 20
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
    ADC_Init();
 102:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
    uart_init();
 106:	0e 94 b0 00 	call	0x160	; 0x160 <uart_init>
	
	DDRA = 0;
 10a:	1a ba       	out	0x1a, r1	; 26
		/*uint16_t adc_value = ADC_Read(0); // Read from channel 0
		uart_transmit((adc_value >> 8) & 0xFF); // Send high byte
		uart_transmit(adc_value & 0xFF);       // Send low byte
		_delay_ms(1000);*/
		
        uint32_t adc_value = ADC_Read(0); // Read from channel 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 4c 00 	call	0x98	; 0x98 <ADC_Read>
 112:	bc 01       	movw	r22, r24
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
		//uart_transmit((adc_value >> 8) & 0xFF); // Send high byte
		//uart_transmit(adc_value & 0xFF);       // Send low byte
		uint32_t voltage = adc_to_mv(adc_value, 10);
 118:	4a e0       	ldi	r20, 0x0A	; 10
 11a:	0e 94 5e 00 	call	0xbc	; 0xbc <adc_to_mv>
		sprintf(buffer, "VOLTAGE = %lu mV\r\n", voltage);
 11e:	9f 93       	push	r25
 120:	8f 93       	push	r24
 122:	7f 93       	push	r23
 124:	6f 93       	push	r22
 126:	80 e6       	ldi	r24, 0x60	; 96
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	9f 93       	push	r25
 12c:	8f 93       	push	r24
 12e:	8e 01       	movw	r16, r28
 130:	0f 5f       	subi	r16, 0xFF	; 255
 132:	1f 4f       	sbci	r17, 0xFF	; 255
 134:	1f 93       	push	r17
 136:	0f 93       	push	r16
 138:	0e 94 0e 01 	call	0x21c	; 0x21c <sprintf>
		uart_transmit_string(buffer);
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 c5 00 	call	0x18a	; 0x18a <uart_transmit_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	9c e2       	ldi	r25, 0x2C	; 44
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x5a>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x64>
 152:	00 00       	nop
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	d6 cf       	rjmp	.-84     	; 0x10c <main+0x1e>

00000160 <uart_init>:

//volatile uint8_t uart_received_flag = 0;
//volatile uint8_t uart_received_byte = 0;

void uart_init(void) {
	DDRD |= (1 << 1);  //PD1 as output
 160:	81 b3       	in	r24, 0x11	; 17
 162:	82 60       	ori	r24, 0x02	; 2
 164:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << 0);  //PD0 as input
 166:	81 b3       	in	r24, 0x11	; 17
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	81 bb       	out	0x11, r24	; 17
	UCSRC &= ~(1 << URSEL); //permite accesu in UBRRH
 16c:	80 b5       	in	r24, 0x20	; 32
 16e:	8f 77       	andi	r24, 0x7F	; 127
 170:	80 bd       	out	0x20, r24	; 32
	UBRRH = (uint8_t)(MYUBRR>>8);
 172:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t)MYUBRR;
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	89 b9       	out	0x09, r24	; 9
	//UCSRA &= ~(1 << U2X) & ~(1 << MPCM); //Set flags on 0
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1 << RXCIE); // Activare RX și TX si rx interrupt
 178:	88 e9       	ldi	r24, 0x98	; 152
 17a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0); // 8-bit, 1 stop, fără paritate
 17c:	86 e8       	ldi	r24, 0x86	; 134
 17e:	80 bd       	out	0x20, r24	; 32
 180:	08 95       	ret

00000182 <uart_transmit>:
	//UCSRC &= ~(1 << UCSZ2);
	//sei();
}

void uart_transmit(char data) {
	while (!(UCSRA & (1<<UDRE))); // Așteaptă până buffer-ul e gol
 182:	5d 9b       	sbis	0x0b, 5	; 11
 184:	fe cf       	rjmp	.-4      	; 0x182 <uart_transmit>
	UDR = data;
 186:	8c b9       	out	0x0c, r24	; 12
 188:	08 95       	ret

0000018a <uart_transmit_string>:
}

void uart_transmit_string(const char *str) {
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
	while (*str) {
 190:	03 c0       	rjmp	.+6      	; 0x198 <uart_transmit_string+0xe>
		uart_transmit(*str++);
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	0e 94 c1 00 	call	0x182	; 0x182 <uart_transmit>
	while (!(UCSRA & (1<<UDRE))); // Așteaptă până buffer-ul e gol
	UDR = data;
}

void uart_transmit_string(const char *str) {
	while (*str) {
 198:	88 81       	ld	r24, Y
 19a:	81 11       	cpse	r24, r1
 19c:	fa cf       	rjmp	.-12     	; 0x192 <uart_transmit_string+0x8>
		uart_transmit(*str++);
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <__udivmodsi4>:
 1a4:	a1 e2       	ldi	r26, 0x21	; 33
 1a6:	1a 2e       	mov	r1, r26
 1a8:	aa 1b       	sub	r26, r26
 1aa:	bb 1b       	sub	r27, r27
 1ac:	fd 01       	movw	r30, r26
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <__udivmodsi4_ep>

000001b0 <__udivmodsi4_loop>:
 1b0:	aa 1f       	adc	r26, r26
 1b2:	bb 1f       	adc	r27, r27
 1b4:	ee 1f       	adc	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	a2 17       	cp	r26, r18
 1ba:	b3 07       	cpc	r27, r19
 1bc:	e4 07       	cpc	r30, r20
 1be:	f5 07       	cpc	r31, r21
 1c0:	20 f0       	brcs	.+8      	; 0x1ca <__udivmodsi4_ep>
 1c2:	a2 1b       	sub	r26, r18
 1c4:	b3 0b       	sbc	r27, r19
 1c6:	e4 0b       	sbc	r30, r20
 1c8:	f5 0b       	sbc	r31, r21

000001ca <__udivmodsi4_ep>:
 1ca:	66 1f       	adc	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	88 1f       	adc	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	1a 94       	dec	r1
 1d4:	69 f7       	brne	.-38     	; 0x1b0 <__udivmodsi4_loop>
 1d6:	60 95       	com	r22
 1d8:	70 95       	com	r23
 1da:	80 95       	com	r24
 1dc:	90 95       	com	r25
 1de:	9b 01       	movw	r18, r22
 1e0:	ac 01       	movw	r20, r24
 1e2:	bd 01       	movw	r22, r26
 1e4:	cf 01       	movw	r24, r30
 1e6:	08 95       	ret

000001e8 <__muluhisi3>:
 1e8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__umulhisi3>
 1ec:	a5 9f       	mul	r26, r21
 1ee:	90 0d       	add	r25, r0
 1f0:	b4 9f       	mul	r27, r20
 1f2:	90 0d       	add	r25, r0
 1f4:	a4 9f       	mul	r26, r20
 1f6:	80 0d       	add	r24, r0
 1f8:	91 1d       	adc	r25, r1
 1fa:	11 24       	eor	r1, r1
 1fc:	08 95       	ret

000001fe <__umulhisi3>:
 1fe:	a2 9f       	mul	r26, r18
 200:	b0 01       	movw	r22, r0
 202:	b3 9f       	mul	r27, r19
 204:	c0 01       	movw	r24, r0
 206:	a3 9f       	mul	r26, r19
 208:	70 0d       	add	r23, r0
 20a:	81 1d       	adc	r24, r1
 20c:	11 24       	eor	r1, r1
 20e:	91 1d       	adc	r25, r1
 210:	b2 9f       	mul	r27, r18
 212:	70 0d       	add	r23, r0
 214:	81 1d       	adc	r24, r1
 216:	11 24       	eor	r1, r1
 218:	91 1d       	adc	r25, r1
 21a:	08 95       	ret

0000021c <sprintf>:
 21c:	ae e0       	ldi	r26, 0x0E	; 14
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e4 e1       	ldi	r30, 0x14	; 20
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__prologue_saves__+0x1c>
 228:	0d 89       	ldd	r16, Y+21	; 0x15
 22a:	1e 89       	ldd	r17, Y+22	; 0x16
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	8c 83       	std	Y+4, r24	; 0x04
 230:	1a 83       	std	Y+2, r17	; 0x02
 232:	09 83       	std	Y+1, r16	; 0x01
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	9f e7       	ldi	r25, 0x7F	; 127
 238:	9e 83       	std	Y+6, r25	; 0x06
 23a:	8d 83       	std	Y+5, r24	; 0x05
 23c:	ae 01       	movw	r20, r28
 23e:	47 5e       	subi	r20, 0xE7	; 231
 240:	5f 4f       	sbci	r21, 0xFF	; 255
 242:	6f 89       	ldd	r22, Y+23	; 0x17
 244:	78 8d       	ldd	r23, Y+24	; 0x18
 246:	ce 01       	movw	r24, r28
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	0e 94 30 01 	call	0x260	; 0x260 <vfprintf>
 24e:	ef 81       	ldd	r30, Y+7	; 0x07
 250:	f8 85       	ldd	r31, Y+8	; 0x08
 252:	e0 0f       	add	r30, r16
 254:	f1 1f       	adc	r31, r17
 256:	10 82       	st	Z, r1
 258:	2e 96       	adiw	r28, 0x0e	; 14
 25a:	e4 e0       	ldi	r30, 0x04	; 4
 25c:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__epilogue_restores__+0x1c>

00000260 <vfprintf>:
 260:	ab e0       	ldi	r26, 0x0B	; 11
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	e6 e3       	ldi	r30, 0x36	; 54
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	0c 94 c1 03 	jmp	0x782	; 0x782 <__prologue_saves__>
 26c:	6c 01       	movw	r12, r24
 26e:	7b 01       	movw	r14, r22
 270:	8a 01       	movw	r16, r20
 272:	fc 01       	movw	r30, r24
 274:	17 82       	std	Z+7, r1	; 0x07
 276:	16 82       	std	Z+6, r1	; 0x06
 278:	83 81       	ldd	r24, Z+3	; 0x03
 27a:	81 ff       	sbrs	r24, 1
 27c:	cc c1       	rjmp	.+920    	; 0x616 <__stack+0x1b7>
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	3c 01       	movw	r6, r24
 284:	f6 01       	movw	r30, r12
 286:	93 81       	ldd	r25, Z+3	; 0x03
 288:	f7 01       	movw	r30, r14
 28a:	93 fd       	sbrc	r25, 3
 28c:	85 91       	lpm	r24, Z+
 28e:	93 ff       	sbrs	r25, 3
 290:	81 91       	ld	r24, Z+
 292:	7f 01       	movw	r14, r30
 294:	88 23       	and	r24, r24
 296:	09 f4       	brne	.+2      	; 0x29a <vfprintf+0x3a>
 298:	ba c1       	rjmp	.+884    	; 0x60e <__stack+0x1af>
 29a:	85 32       	cpi	r24, 0x25	; 37
 29c:	39 f4       	brne	.+14     	; 0x2ac <vfprintf+0x4c>
 29e:	93 fd       	sbrc	r25, 3
 2a0:	85 91       	lpm	r24, Z+
 2a2:	93 ff       	sbrs	r25, 3
 2a4:	81 91       	ld	r24, Z+
 2a6:	7f 01       	movw	r14, r30
 2a8:	85 32       	cpi	r24, 0x25	; 37
 2aa:	29 f4       	brne	.+10     	; 0x2b6 <vfprintf+0x56>
 2ac:	b6 01       	movw	r22, r12
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 2b4:	e7 cf       	rjmp	.-50     	; 0x284 <vfprintf+0x24>
 2b6:	91 2c       	mov	r9, r1
 2b8:	21 2c       	mov	r2, r1
 2ba:	31 2c       	mov	r3, r1
 2bc:	ff e1       	ldi	r31, 0x1F	; 31
 2be:	f3 15       	cp	r31, r3
 2c0:	d8 f0       	brcs	.+54     	; 0x2f8 <vfprintf+0x98>
 2c2:	8b 32       	cpi	r24, 0x2B	; 43
 2c4:	79 f0       	breq	.+30     	; 0x2e4 <vfprintf+0x84>
 2c6:	38 f4       	brcc	.+14     	; 0x2d6 <vfprintf+0x76>
 2c8:	80 32       	cpi	r24, 0x20	; 32
 2ca:	79 f0       	breq	.+30     	; 0x2ea <vfprintf+0x8a>
 2cc:	83 32       	cpi	r24, 0x23	; 35
 2ce:	a1 f4       	brne	.+40     	; 0x2f8 <vfprintf+0x98>
 2d0:	23 2d       	mov	r18, r3
 2d2:	20 61       	ori	r18, 0x10	; 16
 2d4:	1d c0       	rjmp	.+58     	; 0x310 <vfprintf+0xb0>
 2d6:	8d 32       	cpi	r24, 0x2D	; 45
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <vfprintf+0x92>
 2da:	80 33       	cpi	r24, 0x30	; 48
 2dc:	69 f4       	brne	.+26     	; 0x2f8 <vfprintf+0x98>
 2de:	23 2d       	mov	r18, r3
 2e0:	21 60       	ori	r18, 0x01	; 1
 2e2:	16 c0       	rjmp	.+44     	; 0x310 <vfprintf+0xb0>
 2e4:	83 2d       	mov	r24, r3
 2e6:	82 60       	ori	r24, 0x02	; 2
 2e8:	38 2e       	mov	r3, r24
 2ea:	e3 2d       	mov	r30, r3
 2ec:	e4 60       	ori	r30, 0x04	; 4
 2ee:	3e 2e       	mov	r3, r30
 2f0:	2a c0       	rjmp	.+84     	; 0x346 <vfprintf+0xe6>
 2f2:	f3 2d       	mov	r31, r3
 2f4:	f8 60       	ori	r31, 0x08	; 8
 2f6:	1d c0       	rjmp	.+58     	; 0x332 <vfprintf+0xd2>
 2f8:	37 fc       	sbrc	r3, 7
 2fa:	2d c0       	rjmp	.+90     	; 0x356 <vfprintf+0xf6>
 2fc:	20 ed       	ldi	r18, 0xD0	; 208
 2fe:	28 0f       	add	r18, r24
 300:	2a 30       	cpi	r18, 0x0A	; 10
 302:	40 f0       	brcs	.+16     	; 0x314 <vfprintf+0xb4>
 304:	8e 32       	cpi	r24, 0x2E	; 46
 306:	b9 f4       	brne	.+46     	; 0x336 <vfprintf+0xd6>
 308:	36 fc       	sbrc	r3, 6
 30a:	81 c1       	rjmp	.+770    	; 0x60e <__stack+0x1af>
 30c:	23 2d       	mov	r18, r3
 30e:	20 64       	ori	r18, 0x40	; 64
 310:	32 2e       	mov	r3, r18
 312:	19 c0       	rjmp	.+50     	; 0x346 <vfprintf+0xe6>
 314:	36 fe       	sbrs	r3, 6
 316:	06 c0       	rjmp	.+12     	; 0x324 <vfprintf+0xc4>
 318:	8a e0       	ldi	r24, 0x0A	; 10
 31a:	98 9e       	mul	r9, r24
 31c:	20 0d       	add	r18, r0
 31e:	11 24       	eor	r1, r1
 320:	92 2e       	mov	r9, r18
 322:	11 c0       	rjmp	.+34     	; 0x346 <vfprintf+0xe6>
 324:	ea e0       	ldi	r30, 0x0A	; 10
 326:	2e 9e       	mul	r2, r30
 328:	20 0d       	add	r18, r0
 32a:	11 24       	eor	r1, r1
 32c:	22 2e       	mov	r2, r18
 32e:	f3 2d       	mov	r31, r3
 330:	f0 62       	ori	r31, 0x20	; 32
 332:	3f 2e       	mov	r3, r31
 334:	08 c0       	rjmp	.+16     	; 0x346 <vfprintf+0xe6>
 336:	8c 36       	cpi	r24, 0x6C	; 108
 338:	21 f4       	brne	.+8      	; 0x342 <vfprintf+0xe2>
 33a:	83 2d       	mov	r24, r3
 33c:	80 68       	ori	r24, 0x80	; 128
 33e:	38 2e       	mov	r3, r24
 340:	02 c0       	rjmp	.+4      	; 0x346 <vfprintf+0xe6>
 342:	88 36       	cpi	r24, 0x68	; 104
 344:	41 f4       	brne	.+16     	; 0x356 <vfprintf+0xf6>
 346:	f7 01       	movw	r30, r14
 348:	93 fd       	sbrc	r25, 3
 34a:	85 91       	lpm	r24, Z+
 34c:	93 ff       	sbrs	r25, 3
 34e:	81 91       	ld	r24, Z+
 350:	7f 01       	movw	r14, r30
 352:	81 11       	cpse	r24, r1
 354:	b3 cf       	rjmp	.-154    	; 0x2bc <vfprintf+0x5c>
 356:	98 2f       	mov	r25, r24
 358:	9f 7d       	andi	r25, 0xDF	; 223
 35a:	95 54       	subi	r25, 0x45	; 69
 35c:	93 30       	cpi	r25, 0x03	; 3
 35e:	28 f4       	brcc	.+10     	; 0x36a <vfprintf+0x10a>
 360:	0c 5f       	subi	r16, 0xFC	; 252
 362:	1f 4f       	sbci	r17, 0xFF	; 255
 364:	9f e3       	ldi	r25, 0x3F	; 63
 366:	99 83       	std	Y+1, r25	; 0x01
 368:	0d c0       	rjmp	.+26     	; 0x384 <vfprintf+0x124>
 36a:	83 36       	cpi	r24, 0x63	; 99
 36c:	31 f0       	breq	.+12     	; 0x37a <vfprintf+0x11a>
 36e:	83 37       	cpi	r24, 0x73	; 115
 370:	71 f0       	breq	.+28     	; 0x38e <vfprintf+0x12e>
 372:	83 35       	cpi	r24, 0x53	; 83
 374:	09 f0       	breq	.+2      	; 0x378 <vfprintf+0x118>
 376:	59 c0       	rjmp	.+178    	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
 378:	21 c0       	rjmp	.+66     	; 0x3bc <vfprintf+0x15c>
 37a:	f8 01       	movw	r30, r16
 37c:	80 81       	ld	r24, Z
 37e:	89 83       	std	Y+1, r24	; 0x01
 380:	0e 5f       	subi	r16, 0xFE	; 254
 382:	1f 4f       	sbci	r17, 0xFF	; 255
 384:	88 24       	eor	r8, r8
 386:	83 94       	inc	r8
 388:	91 2c       	mov	r9, r1
 38a:	53 01       	movw	r10, r6
 38c:	13 c0       	rjmp	.+38     	; 0x3b4 <vfprintf+0x154>
 38e:	28 01       	movw	r4, r16
 390:	f2 e0       	ldi	r31, 0x02	; 2
 392:	4f 0e       	add	r4, r31
 394:	51 1c       	adc	r5, r1
 396:	f8 01       	movw	r30, r16
 398:	a0 80       	ld	r10, Z
 39a:	b1 80       	ldd	r11, Z+1	; 0x01
 39c:	36 fe       	sbrs	r3, 6
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <vfprintf+0x146>
 3a0:	69 2d       	mov	r22, r9
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <vfprintf+0x14a>
 3a6:	6f ef       	ldi	r22, 0xFF	; 255
 3a8:	7f ef       	ldi	r23, 0xFF	; 255
 3aa:	c5 01       	movw	r24, r10
 3ac:	0e 94 1c 03 	call	0x638	; 0x638 <strnlen>
 3b0:	4c 01       	movw	r8, r24
 3b2:	82 01       	movw	r16, r4
 3b4:	f3 2d       	mov	r31, r3
 3b6:	ff 77       	andi	r31, 0x7F	; 127
 3b8:	3f 2e       	mov	r3, r31
 3ba:	16 c0       	rjmp	.+44     	; 0x3e8 <vfprintf+0x188>
 3bc:	28 01       	movw	r4, r16
 3be:	22 e0       	ldi	r18, 0x02	; 2
 3c0:	42 0e       	add	r4, r18
 3c2:	51 1c       	adc	r5, r1
 3c4:	f8 01       	movw	r30, r16
 3c6:	a0 80       	ld	r10, Z
 3c8:	b1 80       	ldd	r11, Z+1	; 0x01
 3ca:	36 fe       	sbrs	r3, 6
 3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <vfprintf+0x174>
 3ce:	69 2d       	mov	r22, r9
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <vfprintf+0x178>
 3d4:	6f ef       	ldi	r22, 0xFF	; 255
 3d6:	7f ef       	ldi	r23, 0xFF	; 255
 3d8:	c5 01       	movw	r24, r10
 3da:	0e 94 11 03 	call	0x622	; 0x622 <strnlen_P>
 3de:	4c 01       	movw	r8, r24
 3e0:	f3 2d       	mov	r31, r3
 3e2:	f0 68       	ori	r31, 0x80	; 128
 3e4:	3f 2e       	mov	r3, r31
 3e6:	82 01       	movw	r16, r4
 3e8:	33 fc       	sbrc	r3, 3
 3ea:	1b c0       	rjmp	.+54     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 3ec:	82 2d       	mov	r24, r2
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	88 16       	cp	r8, r24
 3f2:	99 06       	cpc	r9, r25
 3f4:	b0 f4       	brcc	.+44     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 3f6:	b6 01       	movw	r22, r12
 3f8:	80 e2       	ldi	r24, 0x20	; 32
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 400:	2a 94       	dec	r2
 402:	f4 cf       	rjmp	.-24     	; 0x3ec <vfprintf+0x18c>
 404:	f5 01       	movw	r30, r10
 406:	37 fc       	sbrc	r3, 7
 408:	85 91       	lpm	r24, Z+
 40a:	37 fe       	sbrs	r3, 7
 40c:	81 91       	ld	r24, Z+
 40e:	5f 01       	movw	r10, r30
 410:	b6 01       	movw	r22, r12
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 418:	21 10       	cpse	r2, r1
 41a:	2a 94       	dec	r2
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	82 1a       	sub	r8, r18
 420:	91 08       	sbc	r9, r1
 422:	81 14       	cp	r8, r1
 424:	91 04       	cpc	r9, r1
 426:	71 f7       	brne	.-36     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 428:	e8 c0       	rjmp	.+464    	; 0x5fa <__stack+0x19b>
 42a:	84 36       	cpi	r24, 0x64	; 100
 42c:	11 f0       	breq	.+4      	; 0x432 <__DATA_REGION_LENGTH__+0x32>
 42e:	89 36       	cpi	r24, 0x69	; 105
 430:	41 f5       	brne	.+80     	; 0x482 <__stack+0x23>
 432:	f8 01       	movw	r30, r16
 434:	37 fe       	sbrs	r3, 7
 436:	07 c0       	rjmp	.+14     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 438:	60 81       	ld	r22, Z
 43a:	71 81       	ldd	r23, Z+1	; 0x01
 43c:	82 81       	ldd	r24, Z+2	; 0x02
 43e:	93 81       	ldd	r25, Z+3	; 0x03
 440:	0c 5f       	subi	r16, 0xFC	; 252
 442:	1f 4f       	sbci	r17, 0xFF	; 255
 444:	08 c0       	rjmp	.+16     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 446:	60 81       	ld	r22, Z
 448:	71 81       	ldd	r23, Z+1	; 0x01
 44a:	07 2e       	mov	r0, r23
 44c:	00 0c       	add	r0, r0
 44e:	88 0b       	sbc	r24, r24
 450:	99 0b       	sbc	r25, r25
 452:	0e 5f       	subi	r16, 0xFE	; 254
 454:	1f 4f       	sbci	r17, 0xFF	; 255
 456:	f3 2d       	mov	r31, r3
 458:	ff 76       	andi	r31, 0x6F	; 111
 45a:	3f 2e       	mov	r3, r31
 45c:	97 ff       	sbrs	r25, 7
 45e:	09 c0       	rjmp	.+18     	; 0x472 <__stack+0x13>
 460:	90 95       	com	r25
 462:	80 95       	com	r24
 464:	70 95       	com	r23
 466:	61 95       	neg	r22
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8f 4f       	sbci	r24, 0xFF	; 255
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	f0 68       	ori	r31, 0x80	; 128
 470:	3f 2e       	mov	r3, r31
 472:	2a e0       	ldi	r18, 0x0A	; 10
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	a3 01       	movw	r20, r6
 478:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ultoa_invert>
 47c:	88 2e       	mov	r8, r24
 47e:	86 18       	sub	r8, r6
 480:	45 c0       	rjmp	.+138    	; 0x50c <__stack+0xad>
 482:	85 37       	cpi	r24, 0x75	; 117
 484:	31 f4       	brne	.+12     	; 0x492 <__stack+0x33>
 486:	23 2d       	mov	r18, r3
 488:	2f 7e       	andi	r18, 0xEF	; 239
 48a:	b2 2e       	mov	r11, r18
 48c:	2a e0       	ldi	r18, 0x0A	; 10
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	25 c0       	rjmp	.+74     	; 0x4dc <__stack+0x7d>
 492:	93 2d       	mov	r25, r3
 494:	99 7f       	andi	r25, 0xF9	; 249
 496:	b9 2e       	mov	r11, r25
 498:	8f 36       	cpi	r24, 0x6F	; 111
 49a:	c1 f0       	breq	.+48     	; 0x4cc <__stack+0x6d>
 49c:	18 f4       	brcc	.+6      	; 0x4a4 <__stack+0x45>
 49e:	88 35       	cpi	r24, 0x58	; 88
 4a0:	79 f0       	breq	.+30     	; 0x4c0 <__stack+0x61>
 4a2:	b5 c0       	rjmp	.+362    	; 0x60e <__stack+0x1af>
 4a4:	80 37       	cpi	r24, 0x70	; 112
 4a6:	19 f0       	breq	.+6      	; 0x4ae <__stack+0x4f>
 4a8:	88 37       	cpi	r24, 0x78	; 120
 4aa:	21 f0       	breq	.+8      	; 0x4b4 <__stack+0x55>
 4ac:	b0 c0       	rjmp	.+352    	; 0x60e <__stack+0x1af>
 4ae:	e9 2f       	mov	r30, r25
 4b0:	e0 61       	ori	r30, 0x10	; 16
 4b2:	be 2e       	mov	r11, r30
 4b4:	b4 fe       	sbrs	r11, 4
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__stack+0x73>
 4b8:	fb 2d       	mov	r31, r11
 4ba:	f4 60       	ori	r31, 0x04	; 4
 4bc:	bf 2e       	mov	r11, r31
 4be:	09 c0       	rjmp	.+18     	; 0x4d2 <__stack+0x73>
 4c0:	34 fe       	sbrs	r3, 4
 4c2:	0a c0       	rjmp	.+20     	; 0x4d8 <__stack+0x79>
 4c4:	29 2f       	mov	r18, r25
 4c6:	26 60       	ori	r18, 0x06	; 6
 4c8:	b2 2e       	mov	r11, r18
 4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <__stack+0x79>
 4cc:	28 e0       	ldi	r18, 0x08	; 8
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <__stack+0x7d>
 4d2:	20 e1       	ldi	r18, 0x10	; 16
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__stack+0x7d>
 4d8:	20 e1       	ldi	r18, 0x10	; 16
 4da:	32 e0       	ldi	r19, 0x02	; 2
 4dc:	f8 01       	movw	r30, r16
 4de:	b7 fe       	sbrs	r11, 7
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <__stack+0x91>
 4e2:	60 81       	ld	r22, Z
 4e4:	71 81       	ldd	r23, Z+1	; 0x01
 4e6:	82 81       	ldd	r24, Z+2	; 0x02
 4e8:	93 81       	ldd	r25, Z+3	; 0x03
 4ea:	0c 5f       	subi	r16, 0xFC	; 252
 4ec:	1f 4f       	sbci	r17, 0xFF	; 255
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <__stack+0x9d>
 4f0:	60 81       	ld	r22, Z
 4f2:	71 81       	ldd	r23, Z+1	; 0x01
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 5f       	subi	r16, 0xFE	; 254
 4fa:	1f 4f       	sbci	r17, 0xFF	; 255
 4fc:	a3 01       	movw	r20, r6
 4fe:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ultoa_invert>
 502:	88 2e       	mov	r8, r24
 504:	86 18       	sub	r8, r6
 506:	fb 2d       	mov	r31, r11
 508:	ff 77       	andi	r31, 0x7F	; 127
 50a:	3f 2e       	mov	r3, r31
 50c:	36 fe       	sbrs	r3, 6
 50e:	0d c0       	rjmp	.+26     	; 0x52a <__stack+0xcb>
 510:	23 2d       	mov	r18, r3
 512:	2e 7f       	andi	r18, 0xFE	; 254
 514:	a2 2e       	mov	r10, r18
 516:	89 14       	cp	r8, r9
 518:	58 f4       	brcc	.+22     	; 0x530 <__stack+0xd1>
 51a:	34 fe       	sbrs	r3, 4
 51c:	0b c0       	rjmp	.+22     	; 0x534 <__stack+0xd5>
 51e:	32 fc       	sbrc	r3, 2
 520:	09 c0       	rjmp	.+18     	; 0x534 <__stack+0xd5>
 522:	83 2d       	mov	r24, r3
 524:	8e 7e       	andi	r24, 0xEE	; 238
 526:	a8 2e       	mov	r10, r24
 528:	05 c0       	rjmp	.+10     	; 0x534 <__stack+0xd5>
 52a:	b8 2c       	mov	r11, r8
 52c:	a3 2c       	mov	r10, r3
 52e:	03 c0       	rjmp	.+6      	; 0x536 <__stack+0xd7>
 530:	b8 2c       	mov	r11, r8
 532:	01 c0       	rjmp	.+2      	; 0x536 <__stack+0xd7>
 534:	b9 2c       	mov	r11, r9
 536:	a4 fe       	sbrs	r10, 4
 538:	0f c0       	rjmp	.+30     	; 0x558 <__stack+0xf9>
 53a:	fe 01       	movw	r30, r28
 53c:	e8 0d       	add	r30, r8
 53e:	f1 1d       	adc	r31, r1
 540:	80 81       	ld	r24, Z
 542:	80 33       	cpi	r24, 0x30	; 48
 544:	21 f4       	brne	.+8      	; 0x54e <__stack+0xef>
 546:	9a 2d       	mov	r25, r10
 548:	99 7e       	andi	r25, 0xE9	; 233
 54a:	a9 2e       	mov	r10, r25
 54c:	09 c0       	rjmp	.+18     	; 0x560 <__stack+0x101>
 54e:	a2 fe       	sbrs	r10, 2
 550:	06 c0       	rjmp	.+12     	; 0x55e <__stack+0xff>
 552:	b3 94       	inc	r11
 554:	b3 94       	inc	r11
 556:	04 c0       	rjmp	.+8      	; 0x560 <__stack+0x101>
 558:	8a 2d       	mov	r24, r10
 55a:	86 78       	andi	r24, 0x86	; 134
 55c:	09 f0       	breq	.+2      	; 0x560 <__stack+0x101>
 55e:	b3 94       	inc	r11
 560:	a3 fc       	sbrc	r10, 3
 562:	11 c0       	rjmp	.+34     	; 0x586 <__stack+0x127>
 564:	a0 fe       	sbrs	r10, 0
 566:	06 c0       	rjmp	.+12     	; 0x574 <__stack+0x115>
 568:	b2 14       	cp	r11, r2
 56a:	88 f4       	brcc	.+34     	; 0x58e <__stack+0x12f>
 56c:	28 0c       	add	r2, r8
 56e:	92 2c       	mov	r9, r2
 570:	9b 18       	sub	r9, r11
 572:	0e c0       	rjmp	.+28     	; 0x590 <__stack+0x131>
 574:	b2 14       	cp	r11, r2
 576:	60 f4       	brcc	.+24     	; 0x590 <__stack+0x131>
 578:	b6 01       	movw	r22, r12
 57a:	80 e2       	ldi	r24, 0x20	; 32
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 582:	b3 94       	inc	r11
 584:	f7 cf       	rjmp	.-18     	; 0x574 <__stack+0x115>
 586:	b2 14       	cp	r11, r2
 588:	18 f4       	brcc	.+6      	; 0x590 <__stack+0x131>
 58a:	2b 18       	sub	r2, r11
 58c:	02 c0       	rjmp	.+4      	; 0x592 <__stack+0x133>
 58e:	98 2c       	mov	r9, r8
 590:	21 2c       	mov	r2, r1
 592:	a4 fe       	sbrs	r10, 4
 594:	10 c0       	rjmp	.+32     	; 0x5b6 <__stack+0x157>
 596:	b6 01       	movw	r22, r12
 598:	80 e3       	ldi	r24, 0x30	; 48
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 5a0:	a2 fe       	sbrs	r10, 2
 5a2:	17 c0       	rjmp	.+46     	; 0x5d2 <__stack+0x173>
 5a4:	a1 fc       	sbrc	r10, 1
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <__stack+0x14f>
 5a8:	88 e7       	ldi	r24, 0x78	; 120
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <__stack+0x153>
 5ae:	88 e5       	ldi	r24, 0x58	; 88
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	b6 01       	movw	r22, r12
 5b4:	0c c0       	rjmp	.+24     	; 0x5ce <__stack+0x16f>
 5b6:	8a 2d       	mov	r24, r10
 5b8:	86 78       	andi	r24, 0x86	; 134
 5ba:	59 f0       	breq	.+22     	; 0x5d2 <__stack+0x173>
 5bc:	a1 fe       	sbrs	r10, 1
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__stack+0x165>
 5c0:	8b e2       	ldi	r24, 0x2B	; 43
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <__stack+0x167>
 5c4:	80 e2       	ldi	r24, 0x20	; 32
 5c6:	a7 fc       	sbrc	r10, 7
 5c8:	8d e2       	ldi	r24, 0x2D	; 45
 5ca:	b6 01       	movw	r22, r12
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 5d2:	89 14       	cp	r8, r9
 5d4:	38 f4       	brcc	.+14     	; 0x5e4 <__stack+0x185>
 5d6:	b6 01       	movw	r22, r12
 5d8:	80 e3       	ldi	r24, 0x30	; 48
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 5e0:	9a 94       	dec	r9
 5e2:	f7 cf       	rjmp	.-18     	; 0x5d2 <__stack+0x173>
 5e4:	8a 94       	dec	r8
 5e6:	f3 01       	movw	r30, r6
 5e8:	e8 0d       	add	r30, r8
 5ea:	f1 1d       	adc	r31, r1
 5ec:	80 81       	ld	r24, Z
 5ee:	b6 01       	movw	r22, r12
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 5f6:	81 10       	cpse	r8, r1
 5f8:	f5 cf       	rjmp	.-22     	; 0x5e4 <__stack+0x185>
 5fa:	22 20       	and	r2, r2
 5fc:	09 f4       	brne	.+2      	; 0x600 <__stack+0x1a1>
 5fe:	42 ce       	rjmp	.-892    	; 0x284 <vfprintf+0x24>
 600:	b6 01       	movw	r22, r12
 602:	80 e2       	ldi	r24, 0x20	; 32
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 60a:	2a 94       	dec	r2
 60c:	f6 cf       	rjmp	.-20     	; 0x5fa <__stack+0x19b>
 60e:	f6 01       	movw	r30, r12
 610:	86 81       	ldd	r24, Z+6	; 0x06
 612:	97 81       	ldd	r25, Z+7	; 0x07
 614:	02 c0       	rjmp	.+4      	; 0x61a <__stack+0x1bb>
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	9f ef       	ldi	r25, 0xFF	; 255
 61a:	2b 96       	adiw	r28, 0x0b	; 11
 61c:	e2 e1       	ldi	r30, 0x12	; 18
 61e:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__epilogue_restores__>

00000622 <strnlen_P>:
 622:	fc 01       	movw	r30, r24
 624:	05 90       	lpm	r0, Z+
 626:	61 50       	subi	r22, 0x01	; 1
 628:	70 40       	sbci	r23, 0x00	; 0
 62a:	01 10       	cpse	r0, r1
 62c:	d8 f7       	brcc	.-10     	; 0x624 <strnlen_P+0x2>
 62e:	80 95       	com	r24
 630:	90 95       	com	r25
 632:	8e 0f       	add	r24, r30
 634:	9f 1f       	adc	r25, r31
 636:	08 95       	ret

00000638 <strnlen>:
 638:	fc 01       	movw	r30, r24
 63a:	61 50       	subi	r22, 0x01	; 1
 63c:	70 40       	sbci	r23, 0x00	; 0
 63e:	01 90       	ld	r0, Z+
 640:	01 10       	cpse	r0, r1
 642:	d8 f7       	brcc	.-10     	; 0x63a <strnlen+0x2>
 644:	80 95       	com	r24
 646:	90 95       	com	r25
 648:	8e 0f       	add	r24, r30
 64a:	9f 1f       	adc	r25, r31
 64c:	08 95       	ret

0000064e <fputc>:
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	fb 01       	movw	r30, r22
 658:	23 81       	ldd	r18, Z+3	; 0x03
 65a:	21 fd       	sbrc	r18, 1
 65c:	03 c0       	rjmp	.+6      	; 0x664 <fputc+0x16>
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	9f ef       	ldi	r25, 0xFF	; 255
 662:	2c c0       	rjmp	.+88     	; 0x6bc <fputc+0x6e>
 664:	22 ff       	sbrs	r18, 2
 666:	16 c0       	rjmp	.+44     	; 0x694 <fputc+0x46>
 668:	46 81       	ldd	r20, Z+6	; 0x06
 66a:	57 81       	ldd	r21, Z+7	; 0x07
 66c:	24 81       	ldd	r18, Z+4	; 0x04
 66e:	35 81       	ldd	r19, Z+5	; 0x05
 670:	42 17       	cp	r20, r18
 672:	53 07       	cpc	r21, r19
 674:	44 f4       	brge	.+16     	; 0x686 <fputc+0x38>
 676:	a0 81       	ld	r26, Z
 678:	b1 81       	ldd	r27, Z+1	; 0x01
 67a:	9d 01       	movw	r18, r26
 67c:	2f 5f       	subi	r18, 0xFF	; 255
 67e:	3f 4f       	sbci	r19, 0xFF	; 255
 680:	31 83       	std	Z+1, r19	; 0x01
 682:	20 83       	st	Z, r18
 684:	8c 93       	st	X, r24
 686:	26 81       	ldd	r18, Z+6	; 0x06
 688:	37 81       	ldd	r19, Z+7	; 0x07
 68a:	2f 5f       	subi	r18, 0xFF	; 255
 68c:	3f 4f       	sbci	r19, 0xFF	; 255
 68e:	37 83       	std	Z+7, r19	; 0x07
 690:	26 83       	std	Z+6, r18	; 0x06
 692:	14 c0       	rjmp	.+40     	; 0x6bc <fputc+0x6e>
 694:	8b 01       	movw	r16, r22
 696:	ec 01       	movw	r28, r24
 698:	fb 01       	movw	r30, r22
 69a:	00 84       	ldd	r0, Z+8	; 0x08
 69c:	f1 85       	ldd	r31, Z+9	; 0x09
 69e:	e0 2d       	mov	r30, r0
 6a0:	09 95       	icall
 6a2:	89 2b       	or	r24, r25
 6a4:	e1 f6       	brne	.-72     	; 0x65e <fputc+0x10>
 6a6:	d8 01       	movw	r26, r16
 6a8:	16 96       	adiw	r26, 0x06	; 6
 6aa:	8d 91       	ld	r24, X+
 6ac:	9c 91       	ld	r25, X
 6ae:	17 97       	sbiw	r26, 0x07	; 7
 6b0:	01 96       	adiw	r24, 0x01	; 1
 6b2:	17 96       	adiw	r26, 0x07	; 7
 6b4:	9c 93       	st	X, r25
 6b6:	8e 93       	st	-X, r24
 6b8:	16 97       	sbiw	r26, 0x06	; 6
 6ba:	ce 01       	movw	r24, r28
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	08 95       	ret

000006c6 <__ultoa_invert>:
 6c6:	fa 01       	movw	r30, r20
 6c8:	aa 27       	eor	r26, r26
 6ca:	28 30       	cpi	r18, 0x08	; 8
 6cc:	51 f1       	breq	.+84     	; 0x722 <__ultoa_invert+0x5c>
 6ce:	20 31       	cpi	r18, 0x10	; 16
 6d0:	81 f1       	breq	.+96     	; 0x732 <__ultoa_invert+0x6c>
 6d2:	e8 94       	clt
 6d4:	6f 93       	push	r22
 6d6:	6e 7f       	andi	r22, 0xFE	; 254
 6d8:	6e 5f       	subi	r22, 0xFE	; 254
 6da:	7f 4f       	sbci	r23, 0xFF	; 255
 6dc:	8f 4f       	sbci	r24, 0xFF	; 255
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	af 4f       	sbci	r26, 0xFF	; 255
 6e2:	b1 e0       	ldi	r27, 0x01	; 1
 6e4:	3e d0       	rcall	.+124    	; 0x762 <__ultoa_invert+0x9c>
 6e6:	b4 e0       	ldi	r27, 0x04	; 4
 6e8:	3c d0       	rcall	.+120    	; 0x762 <__ultoa_invert+0x9c>
 6ea:	67 0f       	add	r22, r23
 6ec:	78 1f       	adc	r23, r24
 6ee:	89 1f       	adc	r24, r25
 6f0:	9a 1f       	adc	r25, r26
 6f2:	a1 1d       	adc	r26, r1
 6f4:	68 0f       	add	r22, r24
 6f6:	79 1f       	adc	r23, r25
 6f8:	8a 1f       	adc	r24, r26
 6fa:	91 1d       	adc	r25, r1
 6fc:	a1 1d       	adc	r26, r1
 6fe:	6a 0f       	add	r22, r26
 700:	71 1d       	adc	r23, r1
 702:	81 1d       	adc	r24, r1
 704:	91 1d       	adc	r25, r1
 706:	a1 1d       	adc	r26, r1
 708:	20 d0       	rcall	.+64     	; 0x74a <__ultoa_invert+0x84>
 70a:	09 f4       	brne	.+2      	; 0x70e <__ultoa_invert+0x48>
 70c:	68 94       	set
 70e:	3f 91       	pop	r19
 710:	2a e0       	ldi	r18, 0x0A	; 10
 712:	26 9f       	mul	r18, r22
 714:	11 24       	eor	r1, r1
 716:	30 19       	sub	r19, r0
 718:	30 5d       	subi	r19, 0xD0	; 208
 71a:	31 93       	st	Z+, r19
 71c:	de f6       	brtc	.-74     	; 0x6d4 <__ultoa_invert+0xe>
 71e:	cf 01       	movw	r24, r30
 720:	08 95       	ret
 722:	46 2f       	mov	r20, r22
 724:	47 70       	andi	r20, 0x07	; 7
 726:	40 5d       	subi	r20, 0xD0	; 208
 728:	41 93       	st	Z+, r20
 72a:	b3 e0       	ldi	r27, 0x03	; 3
 72c:	0f d0       	rcall	.+30     	; 0x74c <__ultoa_invert+0x86>
 72e:	c9 f7       	brne	.-14     	; 0x722 <__ultoa_invert+0x5c>
 730:	f6 cf       	rjmp	.-20     	; 0x71e <__ultoa_invert+0x58>
 732:	46 2f       	mov	r20, r22
 734:	4f 70       	andi	r20, 0x0F	; 15
 736:	40 5d       	subi	r20, 0xD0	; 208
 738:	4a 33       	cpi	r20, 0x3A	; 58
 73a:	18 f0       	brcs	.+6      	; 0x742 <__ultoa_invert+0x7c>
 73c:	49 5d       	subi	r20, 0xD9	; 217
 73e:	31 fd       	sbrc	r19, 1
 740:	40 52       	subi	r20, 0x20	; 32
 742:	41 93       	st	Z+, r20
 744:	02 d0       	rcall	.+4      	; 0x74a <__ultoa_invert+0x84>
 746:	a9 f7       	brne	.-22     	; 0x732 <__ultoa_invert+0x6c>
 748:	ea cf       	rjmp	.-44     	; 0x71e <__ultoa_invert+0x58>
 74a:	b4 e0       	ldi	r27, 0x04	; 4
 74c:	a6 95       	lsr	r26
 74e:	97 95       	ror	r25
 750:	87 95       	ror	r24
 752:	77 95       	ror	r23
 754:	67 95       	ror	r22
 756:	ba 95       	dec	r27
 758:	c9 f7       	brne	.-14     	; 0x74c <__ultoa_invert+0x86>
 75a:	00 97       	sbiw	r24, 0x00	; 0
 75c:	61 05       	cpc	r22, r1
 75e:	71 05       	cpc	r23, r1
 760:	08 95       	ret
 762:	9b 01       	movw	r18, r22
 764:	ac 01       	movw	r20, r24
 766:	0a 2e       	mov	r0, r26
 768:	06 94       	lsr	r0
 76a:	57 95       	ror	r21
 76c:	47 95       	ror	r20
 76e:	37 95       	ror	r19
 770:	27 95       	ror	r18
 772:	ba 95       	dec	r27
 774:	c9 f7       	brne	.-14     	; 0x768 <__ultoa_invert+0xa2>
 776:	62 0f       	add	r22, r18
 778:	73 1f       	adc	r23, r19
 77a:	84 1f       	adc	r24, r20
 77c:	95 1f       	adc	r25, r21
 77e:	a0 1d       	adc	r26, r0
 780:	08 95       	ret

00000782 <__prologue_saves__>:
 782:	2f 92       	push	r2
 784:	3f 92       	push	r3
 786:	4f 92       	push	r4
 788:	5f 92       	push	r5
 78a:	6f 92       	push	r6
 78c:	7f 92       	push	r7
 78e:	8f 92       	push	r8
 790:	9f 92       	push	r9
 792:	af 92       	push	r10
 794:	bf 92       	push	r11
 796:	cf 92       	push	r12
 798:	df 92       	push	r13
 79a:	ef 92       	push	r14
 79c:	ff 92       	push	r15
 79e:	0f 93       	push	r16
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	ca 1b       	sub	r28, r26
 7ac:	db 0b       	sbc	r29, r27
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	f8 94       	cli
 7b2:	de bf       	out	0x3e, r29	; 62
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	cd bf       	out	0x3d, r28	; 61
 7b8:	09 94       	ijmp

000007ba <__epilogue_restores__>:
 7ba:	2a 88       	ldd	r2, Y+18	; 0x12
 7bc:	39 88       	ldd	r3, Y+17	; 0x11
 7be:	48 88       	ldd	r4, Y+16	; 0x10
 7c0:	5f 84       	ldd	r5, Y+15	; 0x0f
 7c2:	6e 84       	ldd	r6, Y+14	; 0x0e
 7c4:	7d 84       	ldd	r7, Y+13	; 0x0d
 7c6:	8c 84       	ldd	r8, Y+12	; 0x0c
 7c8:	9b 84       	ldd	r9, Y+11	; 0x0b
 7ca:	aa 84       	ldd	r10, Y+10	; 0x0a
 7cc:	b9 84       	ldd	r11, Y+9	; 0x09
 7ce:	c8 84       	ldd	r12, Y+8	; 0x08
 7d0:	df 80       	ldd	r13, Y+7	; 0x07
 7d2:	ee 80       	ldd	r14, Y+6	; 0x06
 7d4:	fd 80       	ldd	r15, Y+5	; 0x05
 7d6:	0c 81       	ldd	r16, Y+4	; 0x04
 7d8:	1b 81       	ldd	r17, Y+3	; 0x03
 7da:	aa 81       	ldd	r26, Y+2	; 0x02
 7dc:	b9 81       	ldd	r27, Y+1	; 0x01
 7de:	ce 0f       	add	r28, r30
 7e0:	d1 1d       	adc	r29, r1
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	f8 94       	cli
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	cd bf       	out	0x3d, r28	; 61
 7ec:	ed 01       	movw	r28, r26
 7ee:	08 95       	ret

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
